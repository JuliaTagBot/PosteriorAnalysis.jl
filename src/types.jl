"""
Variables from a posterior distribution (typically generated by MCMC).

`keys` and `vars` are sorted by `keys`. Access outside this library
should always use keys.
"""
@auto_hash_equals immutable PosteriorDraws{T}
    len::Int
    keys::Vector{Symbol}
    vars::Vector{T}
    function PosteriorDraws{T}(len::Int, keys::Vector{Symbol}, vars::Vector{T})
        length(keys) == length(vars) ||
            error(ArgumentError("Non-conforming keys and vars."))
        all(length(var) == len for var in vars) ||
            error("Non-conformable lengths")
        all(a < b for (a,b) in partition(keys, 2, 1)) ||
            error(ArgumentError("Duplicate or non-sorted keys."))
        all(isstandardized(v) for v in vars) ||
            error(ArgumentError("Inner constructor expects standardized vars."))
        new{T}(len, keys, vars)
    end
end

function PosteriorDraws{T}(len::Int, keys::Vector{Symbol}, vars::Vector{T})
    # sort by keys
    p = sortperm(keys)
    sorted_keys = keys[p]
    sorted_standardized_vars = map(standardize, vars[p])
    S = eltype(sorted_standardized_vars)
    PosteriorDraws{S}(len, sorted_keys, sorted_standardized_vars)
end

PosteriorDraws(len::Int) = PosteriorDraws(len, Symbol[], Any[])

function PosteriorDraws{T}(keys::Vector{Symbol}, vars::Vector{T})
    length(vars) â‰¥ 1 ||
        error(ArgumentError("Need at least one variable to determine length."))
    PosteriorDraws(length(vars[1]), keys, vars)
end

function PosteriorDraws{T}(key_var_pairs::Pair{Symbol, T}...)
    PosteriorDraws(first.([key_var_pairs...]), last.([key_var_pairs...]))
end

keys(pd::PosteriorDraws) = pd.keys

size(pd::PosteriorDraws) = (length(pd.keys), pd.len)
size(pd::PosteriorDraws, index) = size(pd)[index]

"Lookup `key` in `pd`, returning the corresponding indexes."
function _key2index(pd::PosteriorDraws, key::Symbol)
    index = searchsortedfirst(pd.keys, key)
    index > length(pd.keys) && error(ArgumentError("Variable $(key) not found"))
    index
end

function _key2index(pd::PosteriorDraws, keys::Vector{Symbol})
    [_key2index(pd, key) for key in keys]
end

function getindex(pd::PosteriorDraws, keys)
    keyinds = _key2index(pd, keys)
    if isa(keyinds, Int)
        pd.vars[keyinds]
    else
        PosteriorDraws(pd.len, pd.keys[keyinds], pd.vars[keyinds])
    end
end

function getindex(pd::PosteriorDraws, keys, drawinds)
    keyinds = _key2index(pd, keys)
    if isa(keyinds, Int)
        pd.vars[keyinds][drawinds]
    else
        PosteriorDraws(pd.keys[keyinds],
                       [var[drawinds] for var in pd.vars[keyinds]])
    end
end
